local Check = require("Kdm/Util/Check")
local Expansion = require("Kdm/Expansion")
local Gear = require("Kdm/Gear")
local log = require("Kdm/Log").ForModule("Weapon")

---------------------------------------------------------------------------------------------------

local Weapon = Gear:new()

---------------------------------------------------------------------------------------------------

function Weapon.Init()
    log:Debugf("Weapon.Init()")
    Weapon.weapons = {}
    for _, expansion in ipairs(Expansion.All()) do
        log:Debugf("Processing expansion %s", expansion.name)
        for name, stats in pairs(expansion.weaponStats or {}) do
            if Weapon.weapons[name] then
                error(string.format("Weapon %s was already registered", name))
            end
            Weapon.weapons[name] = Weapon:new({
                name = name,
                canonicalName = name,
                stats = stats,
            })
        end
    end
    log:Debugf("Weapon.Init() done")
end

---------------------------------------------------------------------------------------------------

function Weapon.Get(name)
    log:Debugf("Weapon.Get(%s)", name)
    local weapon = Weapon.weapons[name]
    if weapon then
        return weapon
    end
    local canonicalName = Weapon.cannonicalFor(name)
    log:Debugf("canonicalName = %s", canonicalName)
    local baseWeapon = Weapon.weapons[canonicalName]
    if (baseWeapon == nil) then
        return nil
    end
    weapon = {
        name = name,
        __index = baseWeapon,
    }
    setmetatable(weapon, weapon)
    Weapon.weapons[name] = weapon
    return weapon 
end

function Weapon.cannonicalFor(name)
    local pos = name:find("%[")
    return pos and name:sub(1, pos - 2) or name
end

---------------------------------------------------------------------------------------------------

function Weapon:__tostring()
    return string.format("%s (%d/%d/%d)", self.name, self.stats.speed, self.stats.accuracy, self.stats.strength)
end

---------------------------------------------------------------------------------------------------

return {
    Init = Weapon.Init,
    Get = Weapon.Get,
}
