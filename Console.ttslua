local Check = require("Kdm/Util/Check")
local EventManager = require("Kdm/Util/EventManager")
local Util = require("Kdm/Util/Util")

---------------------------------------------------------------------------------------------------

local Console = {}

---------------------------------------------------------------------------------------------------

function Console.Init()
    Console.commands = {}

    EventManager.AddHandler("onChat", function(message, player, previousReturnValue)
        if message == "" or message:sub(1, 1) ~= ">" then
            return (previousReturnValue == nil) or previousReturnValue
        end

        Console.Printf(message)

        local args = Console.Tokenize(message)
        assert(args, "Expected at least one token")
        local command = Console.commands[args[1]:lower()]
        if not command then
            Console.Printf("Unrecognized command: %s", args[1])
            return false
        end

        command.func(args)

        return false
    end)

    Console.AddCommand("help", function(args)
        for name, command in pairs(Console.commands) do
            Console.Printf("%s %s", name, command.description)
        end
    end, "Shows all commands")
end

---------------------------------------------------------------------------------------------------

function Console.Printf(fmt, ...)
    print(Util.SafeFormat("[aaaaaa]"..fmt, ...))
end

---------------------------------------------------------------------------------------------------

function Console.AddCommand(name, commandFunc, description)
    name = name:lower()
    assert(Check(not Console.commands[name], "Command %s already registered", name))
    Console.commands[name] = {
        func = commandFunc,
        description = description
    }
end

---------------------------------------------------------------------------------------------------

function Console.Tokenize(message)
    local tokens = {}

    local dq = 34   -- ascii double quote "
    local sq = 39   -- ascii single quote '

    local bytes = table.pack(string.byte(message, 1, message:len()))
    local i = 2 -- skip leading console char
    while true do
        local start = i

        -- skip whitespace
        while i <= #bytes and bytes[i] <= 32 do
            i = i + 1
        end
        if i > #bytes then
            break
        end

        local tokenStart = i

        -- check for leading quote (we ignore quotes mid-token)
        local quote = nil
        local b = bytes[i]
        if b == dq or b == sq then
            quote = b
            i = i + 1
            tokenStart = i
        end

        -- find end of word
        if quote then
            while i <= #bytes and bytes[i] ~= quote do
                i = i + 1
            end
            if bytes[i] ~= quote then
                log:Errorf("String missing "..string.char(quote).." quote ")
                return
            end
        else
            while i <= #bytes and bytes[i] > 32 do
                i = i + 1
            end
        end

        table.insert(tokens, message:sub(tokenStart, i - 1):lower())
        i = i + 1
    end

    return tokens
end

---------------------------------------------------------------------------------------------------

return {
    Init = Console.Init,
    Printf = Console.Printf,
    AddCommand = Console.AddCommand,
}
