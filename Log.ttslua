local Check = require("Kdm/Util/Check")
local Console = require("Kdm/Console")
local Util = require("Kdm/Util/Util")

---------------------------------------------------------------------------------------------------

local Log = {}
Log.__index = Log
Log.__call = function(self, ...) log(...) end

Log.logsByModule = {}

Log.DEBUG_MODULES = {
    --["array"] = true,
    --["Archive"] = true,
    --["BattleUi"] = true,
    --["Campaign"] = true,
    --["Container"] = true,
    --["Deck"] = true,
    --["Expansion"] = true,
    --["Gear"] = true,
    --["Hunt"] = true,
    --["Location"] = true,
    --["Player"] = true,
    --["Rules"] = true,
    --["Showdown"] = true,
    --["Survivor"] = true,
    --["Timeline"] = true,
    ["Ui"] = true,
    --["Weapon"] = true,
}

Log.POST_INIT_DEBUG_MODULES = {
    --["Ui"] = true,
}

---------------------------------------------------------------------------------------------------

function Log.Create(module)
    local log = {
        module = module
    }
    setmetatable(log, Log)

    log:EnableDebug(Log.DEBUG_MODULES[module])

    return log
end

---------------------------------------------------------------------------------------------------

function Log:Printf(fmt, ...)
    fmt = fmt or ""
    local msg = Util.SafeFormat(fmt, ...)
    log(Util.SafeFormat("[%s] "..fmt, self.module, ...), nil, "print")
    printToAll(Util.SafeFormat("[66aaff]"..fmt, ...))
end

---------------------------------------------------------------------------------------------------

function Log:DisabledDebugf(fmt, ...) end

function Log:EnabledDebugf(fmt, ...)
    fmt = fmt or ""
    local s = Util.SafeFormat("[%s] "..fmt, self.module, ...)
    log(s, nil, "debug")
end

---------------------------------------------------------------------------------------------------

function Log:Errorf(fmt, ...)
    fmt = fmt or ""
    log(Util.SafeFormat("[%s] "..fmt, self.module, ...), nil, "error")
    printToAll(Util.SafeFormat("[ff4444]"..fmt, ...))
end

---------------------------------------------------------------------------------------------------

function Log:Broadcastf(fmt, ...)
    fmt = fmt or ""
    log(Util.SafeFormat("[%s] "..fmt, self.module, ...), nil, "print")
    broadcastToAll(Util.SafeFormat(fmt, ...))
end

---------------------------------------------------------------------------------------------------

function Log:EnableDebug(enable)
    if enable then
        self.Debugf = Log.EnabledDebugf
    else
        self.Debugf = Log.DisabledDebugf
    end
end

---------------------------------------------------------------------------------------------------

function Log.Init()
    logStyle("debug", { r = 1.0, g = 1.0, b = 1.0 }, "", "")
    logStyle("print", { r = 0.0, g = 1.0, b = 1.0 }, "", "")
    logStyle("error", { r = 1.0, g = 0.0, b = 0.0 }, "", "")

    Console.AddCommand("debug", function(args)
        if #args ~= 3 or (args[3] ~= "on" and args[3] ~= "off") then
            return Console.Printf("Usage: debug <module> <on|off>")
        end

        local module = args[2]
        local log = Log.logsByModule[module]
        if not log then
            return Console.Printf("Unknown module '%s'", module)
        end

        local enabled = args[3] == "on"
        log:EnableDebug(enabled)

        Console.Printf("%s debugging for %s", enabled and "Enabled" or "Disabled", log.module)
    end, "Toggles debug logging for specific modules")
end

---------------------------------------------------------------------------------------------------

function Log.PostInit()
    for module, _ in pairs(Log.POST_INIT_DEBUG_MODULES) do
        Log.logsByModule[module]:EnableDebug(true)
    end
end

---------------------------------------------------------------------------------------------------

function Log.ForModule(module)
    local log = Log.logsByModule[module]
    if not log then
        log = Log.Create(module)
        Log.logsByModule[module] = log
        Log.logsByModule[module:lower()] = log  -- for console commands, which come in all lowercase
    end
    return log
end

---------------------------------------------------------------------------------------------------

return {
    Init = Log.Init,
    PostInit = Log.PostInit,
    ForModule = Log.ForModule,
}
