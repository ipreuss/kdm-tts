local Archive = require("Kdm/Archive")
local Location = require("Kdm/Location")
local log = require("Kdm/Log").ForModule("Deck")
local NamedObject = require("Kdm/NamedObject")
local Trash = require("Kdm/Trash")
local Ui = require("Kdm/Ui")
local Util = require("Kdm/Util/Util")

---------------------------------------------------------------------------------------------------

local Deck = {}

Deck.NEEDS_SHUFFLE = {
    ["Fighting Arts"] = true,
    ["Disorders"] = true,
    ["Tactics"] = true,
    ["Vermin"] = true,
    ["Basic Resources"] = true,
    ["Monster Resources"] = true,
    ["Terrain"] = true,
    ["Seed Patterns"] = true,
}

---------------------------------------------------------------------------------------------------

function Deck.Init()
    local ui = Ui.Create3d("Deck", NamedObject.Get("Showdown Board"), 10.74)

    local deckGrid = {
        { "Seed Patterns" },
        { "Abilities", "Fighting Arts", "Secret Fighting Arts" },
        { "Disorders", "Severe Injuries", "Tactics" },
        { "Weapon Proficiencies", "Armor Sets", "Vermin" },
        { "Strange Resources", "Basic Resources" },
    }
    local x1 = 9.575500
    local x1End = 9.375386
    local width = x1End - x1
    local x3 = 7.538684
    local dx = (x3 - x1) / 2
    local y1 = -1.193880
    local y1End = -0.042474
    local height = y1End - y1
    local y4 = 3.030348
    local dy = (y4 - y1) / 3
    for row, decks in ipairs(deckGrid) do
        for col, deck in ipairs(decks) do
            local x = x1 + (col - 1) * dx
            local y = y1 + (row - 2) * dy
            ui:Button({ id = deck, topLeft = { x = x, y = y }, bottomRight = { x = x + width, y = y + height }, onClick = function()
                Deck.ResetDeck(deck)
            end })
        end
    end

    --ui:ApplyToObject()
end

---------------------------------------------------------------------------------------------------

function Deck.ResetDeck(deck)
    log:Debugf("Resetting deck %s", deck)

    local location = Location.Get(deck)
    local blocking = location:BoxClean({ types = { deck } })
    if #blocking > 0 then
        log:Broadcastf("Something is blocking the deck. Please move the highlighted objects out of the way and try again.")
        Util.HighlightAll(blocking)
        return
    end

    local deckObject = Archive.Take({ name = deck, type = deck, location = location, rotation = { x = 0, y = 180, z = 180 } })
    if Deck.NEEDS_SHUFFLE[deck] then
        deckObject.shuffle()
    end
    Archive.Clean()
end

---------------------------------------------------------------------------------------------------

function Deck.Destroy(deck)
    log:Debugf("Destroying deck %s", deck.getName())
    if not deck then
        log:Debugf("Deck is nil")   
        return
    end
    if deck.getQuantity() <= 1 then
        log:Debugf("Deck has 1 card")
        local card = deck.takeObject()
        card.destroy()
    else
        log:Debugf("Deck has %d cards", deck.getQuantity())
        deck.destroy()
    end
end

function Deck.Remove(deck, selector) 
    log:Debugf("removing from deck %s", deck.getName())
    local objects = deck.getObjects()
    local tempDeckLocation = Location.Get("Temp Deck")
    tempDeckLocation:BoxClean({ tags = { "Card", "Deck" } })
    for i = #objects, 1, -1 do
        log:Debugf("checking %s", objects[i].name)
        if selector(objects[i].name) then
            log:Debugf("removing %s", objects[i].name)
            deck.takeObject({
                index = objects[i].index,
                location = tempDeckLocation,
                smooth = false,
                callback_function = function(obj)
                    obj.destroy()
                end
            })
        end
    end
end

function Deck.AdjustToTrash(deck, cardnames, archives, type)
    log:Debugf("adjusting deck to Trash")
    Deck.Remove(deck, function(name) return Trash.IsInTrash(name, type) end)
    Deck.addCardsFromArchives(deck, cardnames, archives)
    
end

function Deck.Adjust(deck, cardNames, archives)
    log:Debugf("adjusting deck")
    Deck.Remove(deck, function(name)
        return not cardNames[name]
    end)
    Deck.addCardsFromArchives(deck, cardNames, archives)
end

function Deck.addCardsFromArchives(deck, cardNames, archives)
    local tempDeckLocation = Location.Get("Temp Deck")
    local rotation = { x = 0, y = 180, z = 180 }
    for _, archive in ipairs(archives) do
        log:Debugf("adding cards from %s", archive)
        local tempDeck = Archive.Take({
            name = archive,
            type = deck.getGMNotes(),
            location = tempDeckLocation,
            rotation = rotation,
        })
        local objects = tempDeck.getObjects()
        for i = #objects, 1, -1 do
            if cardNames[objects[i].name] then
                deck.putObject(tempDeck.takeObject({index = objects[i].index, position = deck.getPosition()}))
            end
        end
        Deck.Destroy(tempDeck)
    end
end

return Deck