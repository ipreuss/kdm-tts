local Archive = require("Kdm/Archive")
local Bookmarks = require("Kdm/Bookmarks")
local Check = require("Kdm/Util/Check")
local CircularArray = require("Kdm/Util/CircularArray")
local Expansion = require("Kdm/Expansion")
local Location = require("Kdm/Location")
local log = require("Kdm/Log").ForModule("Rules")
local NamedObject = require("Kdm/NamedObject")
local Trie = require("Kdm/Util/Trie")
local Ui = require("Kdm/Ui")
local Util = require("Kdm/Util/Util")
local EventManager = require("Kdm/Util/EventManager")

---------------------------------------------------------------------------------------------------

local Rules = {}

---------------------------------------------------------------------------------------------------

function Rules.Init()
    Rules.trie = Trie()
    Rules.history = CircularArray(100)
    Rules.index = {}
    Rules.searchResultButtons = {}

    for _, expansion in ipairs(Expansion.All()) do
        Rules.RegisterExpansion(expansion)
    end

    local rules = Rules.GetCurrentRules()
    if rules ~= nil then
        local currentState = rules.getStateId()
        local rulebookName = nil
        if currentState == -1 then
            rulebookName = rules.getName()
            if rules.Book ~= nil then
                currentState = rules.book.getPage()
            end
        elseif currentState == 1 then
            rulebookName = rules.getName()
        else
            for _, state in ipairs(rules.getStates()) do
                if state.id == 1 then
                    rulebookName = state.name
                end
            end
        end
        assert(Check(rulebookName, "No rules page with state 1 in %s (%s)", rules.getName(), rules.getGUID()))
        Rules.history:Push({ rulebookName, currentState})
    end

    -----------------------------------------------------------------------------------------------

    local xStart = 70+100+10+30+10
    local yStart = -10
    local ui = Ui.Get2d()
    local colors = "#ffffff|#dddddd|#dddddd|#ffffff"
    Rules.searchInput = ui:Input({ id = "RulesSearch", x = xStart, y = yStart, width = 240, height = 30, placeholder = "search rules/events...", workaroundNilColors = true, textColor = "#000000", colors = colors, textOffset = "5 5 0 0", fontSize = 16, onValueChanged = function(value)
        Rules.SetSearchResults(Rules.Search(value))
    end })
    ui:Button({ id = "RulesCancelSearch", x = xStart+240+5, y = yStart, width = 30, height = 30, text = "X", textAlignment = "MiddleCenter", textColor = "#000000", colors = colors, fontSize = 20, onClick = function()
        Rules.SetSearchResults({})
        Rules.searchInput:SetText(nil)
    end })
    Rules.searchResultsPanel = ui:Panel({ id = "RulesSearchResults", x = xStart, y = yStart - 40, width = 300, height = 160, color = "#00000088", active = false })

    Rules.searchResultButtons = {}
    for i = 1, 5 do
        Rules.searchResultButtons[i] = Rules.searchResultsPanel:Button({ id = "Result"..i, x = 5, y = -5 + (i - 1) * -30, width = 280, height = 30, fontSize = 16, colors = Ui.INVISIBLE_COLORS, textColor = "#dddddd" })
    end

    -----------------------------------------------------------------------------------------------

    Rules.navUi = Ui.Create3d("RulesNav", NamedObject.Get("Rules Navigation Board"), 0.11)

    Rules.createRulebookButtons()

    local staticUi = Ui.Create3d("RulesStaticNav", NamedObject.Get("Rules Navigation Board"), 0.11)
    
    EventManager.AddHandler("onObjectStateChange", function(object, _)
        log:Debugf("Object state changed %s", object.getGMNotes() or "nil")
        if object.getGMNotes() ~= "Rulebook" then
            return
        end
        local rulebook = Rules.getBookName(object)
        local state = Rules.GetState(object)
        log:Debugf("Object state changed to %s[%d]", rulebook, state)
        Rules.addToHistory(rulebook, state)
        Rules.UpdateBookmarks(rulebook, state)
    end)
    ui:ApplyToObject()
end

local x1 = 7.762758
local x1End = 6.705129
local width = x1End - x1
local x13 = -6.702875
local dx = (x13 - x1) / 12

local y1 = -0.401185
local y1End = 0.047924
local height = y1End - y1
local y2 = 0.392804
local dy = y2 - y1

function Rules.createButton(name, labelText, col, row, onClick)
    local topLeft = { x =  x1 + ((col - 1) * dx), y = y1 + ((row - 1) * dy) }
    local bottomRight = { x = topLeft.x + width, y = topLeft.y + height }
    Rules.navUi:Button({ id = name, topLeft = topLeft, bottomRight = bottomRight, onClick = onClick })
end

function Rules.createRuleBookButton(name, labelText, col, row, onClick)
    local topLeft = { x =  x1 + ((col - 1) * dx), y = y1 + ((row - 1) * dy) }
    local bottomRight = { x = topLeft.x + width, y = topLeft.y + height }
    local panel = Rules.navUi:Panel({ id = name .. "panel", topLeft = topLeft, bottomRight = bottomRight, color = Ui.DARK_BROWN })
    local button = Rules.navUi:Button({ id = name, topLeft = topLeft, bottomRight = bottomRight, onClick = onClick })
    labelText = string.gsub(labelText, " ", "\n", 1)
    local text = Rules.navUi:Text({ id = name .. "label", topLeft = topLeft, bottomRight = bottomRight, text = labelText, fontSize = 150, alignment =
    "MiddleCenter", color = Ui.LIGHT_BROWN })
    Rules.navUi:ApplyToObject()
    return { button, panel, text }
end

function Rules.createRulebookButtons()
    Rules.navUi:clear()
    local buttons = {}
    local i = 1
    for _, expansion in ipairs(Expansion.All(Expansion.EnabledFilter)) do
        local rulebooks = expansion.rulebooks or {}
        for _, rulebook in ipairs(rulebooks) do
            local name = rulebook.name
            local label = name:gsub(" Rules", "")
            table.insert(buttons, { name, i, 1, label })
            i = i + 1
        end
    end
    for i, button in ipairs(buttons) do
        Rules.createRuleBookButton(button[1], button[4], button[2], button[3], function() Rules.SpawnRules(button[1], 1) end)
    end
    for j = i, 13 do
        log:Debugf("Creating empty panel %d", j)
        local topLeft = { x =  x1 + ((j - 1) * dx), y = y1 }
        local bottomRight = { x = topLeft.x + width, y = topLeft.y + height }
        Rules.navUi:Panel({ id = "panel"..j, topLeft = topLeft, bottomRight = bottomRight, color = Ui.LIGHT_BROWN })
    end
    Rules.createButton("Back", "@ Back", 6, 2, Rules.Back)
    Rules.createButton("Previous Page", "< Previous Page", 7, 2, function() Rules.ChangePage(-1) end)
    Rules.createButton("Next Page", "> Next Page", 8, 2, function() Rules.ChangePage(1) end)
    Rules.navUi:ApplyToObject()
end
---------------------------------------------------------------------------------------------------

function Rules.RegisterExpansion(expansion)
    log:Debugf("Registering rules for %s", expansion.name)
    for _, rulebook in ipairs(expansion.rulebooks or {}) do
        local rulebookName = rulebook.name
        assert(Check.Str(rulebookName, "rulebook.name"))

        local pages = rulebook.pages
        assert(Check.Table(rulebook.pages))

        for pageName, pageData in pairs(pages) do
            assert(Check.Str(pageName, "rulebooks[%s].pages[pageName]", rulebookName))
            local state = pageData.state
            assert(Check.Num(state, "rulebooks[%s].pages[%s].state", rulebookName, pageName))

            assert(Check(Rules.index[pageName] == nil, "Rulebook page %s is already registered to %s", pageName, Rules.index[pageName]))
            Rules.index[pageName] = { rulebook = rulebookName, state = state }

            local keywords = pageData.keywords
            assert(Check.Table(keywords, "rulebooks[%s].pages[%s].keywords", rulebookName, pageName))

            local entry = {
                rulebook = rulebookName,
                name = pageName,
                state = state,
                timelineEvent = pageData.timelineEvent,
                showdown = pageData.showdown,
            }

            for keywordIndex, keyword in ipairs(keywords) do
                assert(Check.Str(keyword, "rulebooks[%s].pages[%s].keywords[%d]", rulebookName, pageName, keywordIndex))
                Rules.trie:Set(keyword, entry)
            end

            if pageData.huntEventStart then
                local huntEventStart = pageData.huntEventStart
                assert(Check.Num(huntEventStart, "rulebooks[%s].pages[%s].huntEventStart", rulebookName, pageName))

                local huntEventEnd = pageData.huntEventEnd
                assert(Check.Num(huntEventEnd, "rulebooks[%s].pages[%s].huntEventEnd", rulebookName, pageName))

                for huntEventNumber = huntEventStart, huntEventEnd do
                    Rules.trie:Set(tostring(huntEventNumber), entry)
                end
            end
        end
    end
end

---------------------------------------------------------------------------------------------------

function Rules.RulebookAndState(name)
    local data = Rules.index[name]
    assert(Check(data, "Unknown rule: %s", name))
    return data.rulebook, data.state
end

---------------------------------------------------------------------------------------------------

function Rules.Search(searchTerms)
    if searchTerms == nil or searchTerms == "" then
        return {}
    end

    -- only accept results that match all terms
    local matchIndex = {}
    local i = 1
    for term in string.gmatch(searchTerms, "%S+") do
        local termMatches = Rules.trie:Get(term)
        local termIndex = Util.Index(termMatches, "name")

        matchIndex = (i == 1) and termIndex or Util.Intersect(matchIndex, termIndex)
        i = i + 1
    end

    -- sort matches
    local sortedMatches = {}
    for _, m in pairs(matchIndex) do
        table.insert(sortedMatches, m)
    end
    table.sort(sortedMatches, function(x, y) return x.name < y.name end)

    return sortedMatches
end

---------------------------------------------------------------------------------------------------

function Rules.SetSearchResults(results)
    if #results == 0 then
        Rules.searchResultsPanel:Hide()
        return
    end

    Rules.searchResultsPanel:Show()
    local numResults = Util.Min(5, #results)
    Rules.searchResultsPanel:SetHeight(10 + (numResults * 30))

    for i = 1, numResults do
        local result = results[i]
        local button = Rules.searchResultButtons[i]
        button:Show()
        button:SetOnClick(function()
            Rules.searchInput:SetText(nil)
            Rules.SetSearchResults({})
            Rules.SpawnRules(result.rulebook, result.state)
            --Location.Get("Rules Board"):LookAt({ pitch = 90 })
        end)
        button:SetText(result.name)
    end

    for i = numResults + 1, 5 do
        local button = Rules.searchResultButtons[i]
        button:Hide()
        button:SetOnClick(nil)
        button:SetText(nil)
    end
end

---------------------------------------------------------------------------------------------------

function Rules.SpawnRules(rules, state, dontRecordHistory)
    assert(Check.Str(rules))
    assert(Check.Num(state))
    assert(Check.BooleanOrNil(dontRecordHistory))

    log:Debugf("Spawning rules %s[%d]", rules, state)

    local location = Location.Get("Rules Board")
    local blocking = location:BoxClean({ types = { "Rulebook", "Bookmarks" } })
    if #blocking > 0 then
        log:Broadcastf("Something is blocking the rules board. Please move the highlighted objects out of the way and try again.")
        Util.HighlightAll(blocking)
        return
    end

    Archive.Take({
        name = rules,
        type = "Rulebook",
        location = location,
        spawnFunc = function(obj)
            if obj.Book ~= nil then
                Wait.frames(function()
                    if state > 1 then
                        obj.Book.setPage(state)
                    end
                    obj.setLock(true)
                    Rules.UpdateBookmarks(rules, state)
                end, 3)
            else
                if state > 1 then
                    Rules.skipNextHistory = dontRecordHistory
                    obj = obj.setState(state)
                end
                Wait.frames(function()
                    obj.setLock(true)
                    Rules.UpdateBookmarks(rules, state)
                end, 3)
            end
        end,
    })

    if not dontRecordHistory then
        Rules.addToHistory(rules, state)
    end

    Archive.Clean()
end

function Rules.addToHistory(rules, state)
    if Rules.skipNextHistory then
        Rules.skipNextHistory = false
        return
    end
    local top = Rules.history:Top()
    if (top and top[1] == rules and top[2] == state) then
        return
    end
    log:Debugf("Adding to history %s[%d]", rules, state)
    Rules.history:Push({ rules, state })
end

function Rules.UpdateBookmarks(rules, state) 
    local location = Location.Get("Rules Board")
    location:BoxClean({ types = { "Bookmarks" } })
    local position = location:Center()
    position.x, position.y, position.z = position.x -3, position.y + 3,  position.z + 14
    Bookmarks.placeFor(function (bookmark)
        local bookmarkrulebook, bookmarkstate = Rules.RulebookAndState(bookmark.rulespage)
        return bookmarkrulebook == rules and bookmarkstate == state
    end, { position = position })
end

---------------------------------------------------------------------------------------------------

function Rules.GetCurrentRules()
    return Location.Get("Rules Board"):FirstObject({ types = { "Rulebook" } })
end

---------------------------------------------------------------------------------------------------

function Rules.Back()
    local rules = Rules.GetCurrentRules()
    if not rules then
        return
    end

    if Rules.history:Size() <= 1 then
        log:Debugf("<= 1 history element, can't go back")
        return
    end

    Rules.history:Pop()
    local last = Rules.history:Top()
    log:Debugf("Going back to %s[%d]", last[1], last[2])
    Rules.SpawnRules(last[1], last[2], true)   -- dontRecordHistory
end

---------------------------------------------------------------------------------------------------

function Rules.GetState(rules)
    return rules.Book and rules.Book.getPage() or rules.getStateId()
end

function Rules.getBookName(rules)
    if rules.Book then
        return rules.getName()
    end
    for _, state in ipairs(rules.getStates()) do
        if state.id == 1 then
            return state.name
        end
    end
    return rules.getDescription()
end

function Rules.ChangePage(dir)
    local rules = Rules.GetCurrentRules()
    if not rules then
        log:Debugf("No rules to change")
        return
    end

    local currentState = Rules.GetState(rules)
    local nextState = currentState + dir

    log:Debugf("Found current rules %s (%s) at state %d, looking for state %d", rules.getName(), rules.getGUID(), currentState, nextState)

    local rulebookName = Rules.getBookName(rules)
    local hasNext = false

    if rules.Book then
        hasNext = true
    else
        for _, state in ipairs(rules.getStates()) do
            if state.id == nextState then
                hasNext = true
            end
        end
    end

    if not hasNext then
        log:Debugf("No state %d", nextState)
        return
    end

    assert(Check(rulebookName, "No rulebook name (page with state 1) in %s (%s)", rules.getName(), rules.getGUID()))

    if rules.Book then
        if rules.Book.setPage(nextState) then
            Rules.history:Push({ rulebookName, nextState})
            Rules.UpdateBookmarks(rulebookName, nextState)
        end
    else
        local finalObj = rules.setState(nextState)
        Wait.frames(function()
            finalObj.setLock(true)
            Rules.UpdateBookmarks(rulebookName, nextState)
        end, 3)
    end
end

---------------------------------------------------------------------------------------------------

return {
    Init = Rules.Init,
    RulebookAndState = Rules.RulebookAndState,
    Search = Rules.Search,
    SpawnRules = Rules.SpawnRules,
    createRulebookButtons = Rules.createRulebookButtons,
}
